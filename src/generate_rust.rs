use crate::{
    identifier::Identifier,
    schema::{self, relativize_namespace},
};
use std::{
    collections::BTreeMap,
    fmt::{self, Write},
    path::PathBuf,
};

// The string to be used for each indentation level.
const INDENTATION: &str = "    ";

// The generated types will derive these traits.
const TRAITS_TO_DERIVE: &[&str] = &["Clone", "Debug"];

// This is the full list of Rust 2018 keywords, both in use and reserved.
const RUST_KEYWORDS: &[&str] = &[
    "Self", "abstract", "as", "async", "await", "become", "box", "break", "const", "continue",
    "crate", "do", "dyn", "else", "enum", "extern", "false", "final", "fn", "for", "if", "impl",
    "in", "let", "loop", "macro", "match", "mod", "move", "mut", "override", "priv", "pub", "ref",
    "return", "self", "static", "struct", "super", "trait", "true", "try", "type", "typeof",
    "unsafe", "unsized", "use", "virtual", "where", "while", "yield",
];

// This struct represents a tree of schemas organized in a module hierarchy.
#[derive(Clone, Debug)]
struct Module {
    children: BTreeMap<Identifier, Module>,
    schema: schema::Schema,
}

// This enum represents a case convention for the `write_identifier` function below.
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
enum CaseConvention {
    Pascal,
    Snake,
}

use CaseConvention::{Pascal, Snake};

// This enum is used to distinguish between the ingress and egress versions of a type.
#[derive(Clone, Copy, Debug, Eq, PartialEq)]
enum Direction {
    Out,
    In,
}

use Direction::{In, Out};

// Generate Rust code from a schema and its transitive dependencies.
#[allow(clippy::too_many_lines)]
pub fn generate(
    typical_version: &str,
    schemas: BTreeMap<schema::Namespace, (schema::Schema, PathBuf, String)>,
) -> String {
    // Construct a tree of modules and schemas. We start with an empty tree.
    let mut tree = Module {
        children: BTreeMap::new(),
        schema: schema::Schema {
            imports: BTreeMap::new(),
            declarations: BTreeMap::new(),
        },
    };

    // Populate the tree with all the schemas.
    for (namespace, (schema, _, _)) in schemas {
        insert_schema(&mut tree, &namespace, schema);
    }

    // Write the code.
    let mut buffer = String::new();

    if !tree.children.is_empty() || !tree.schema.declarations.is_empty() {
        // The `unwrap` is safe because the `std::fmt::Write` impl for `String` is infallible.
        // For functions that take abstract parameters which implement `std::io::Read` or
        // `std::io::Write`, it's idiomatic to consume the reader or writer rather than borrowing
        // them (https://rust-lang.github.io/api-guidelines/interoperability.html
        // #generic-readerwriter-functions-take-r-read-and-w-write-by-value-c-rw-value). However,
        // we borrow them anyway since that allows us to pass the reference (after reborrowing)
        // to recursive calls, rather than building up and following chains of references.
        writeln!(
            &mut buffer,
            "\
// This file was automatically generated by Typical {}.
// Visit https://github.com/stepchowfun/typical for more information.

#![allow(clippy::all, clippy::pedantic, clippy::nursery, warnings)]

#[rustfmt::skip]
use std::{{
    cmp::min,
    io::{{self, BufRead, Error, ErrorKind, Write}},
    mem::transmute,
}};

#[rustfmt::skip]
fn zigzag_encode(value: i64) -> u64 {{
    unsafe {{
        transmute::<i64, u64>(value >> 63) ^ transmute::<i64, u64>(value << 1)
    }}
}}

#[rustfmt::skip]
fn zigzag_decode(value: u64) -> i64 {{
    unsafe {{
        transmute::<u64, i64>(value >> 1) ^ -transmute::<u64, i64>(value & 1)
    }}
}}

#[rustfmt::skip]
fn varint_size_from_value(value: u64) -> u64 {{
    let mut size = 1_u64;
    let mut upper_bound_exclusive = 0_u64;

    while size < 9_u64 {{
        upper_bound_exclusive += 1_u64 << (size * 7_u64);

        if value < upper_bound_exclusive {{
            break;
        }}

        size += 1_u64;
    }}

    size
}}

#[rustfmt::skip]
fn varint_size_from_first_byte(first_byte: u8) -> u32 {{
    first_byte.trailing_zeros() + 1
}}

#[rustfmt::skip]
fn serialize_varint<T: Write>(value: u64, writer: &mut T) -> io::Result<()> {{
    let size = varint_size_from_value(value);
    let size_minus_one = size - 1;

    let mut x = value;
    for i in 1..size {{
        x -= 1_u64 << (i * 7);
    }}

    writer.write_all(&[((x << size) | (1_u64 << size_minus_one)) as u8])?;
    x >>= 8_u64.saturating_sub(size);

    for _ in 0..size_minus_one {{
        writer.write_all(&[x as u8])?;
        x >>= 8;
    }}

    Ok(())
}}

#[rustfmt::skip]
fn deserialize_varint<T: BufRead>(reader: &mut T) -> io::Result<u64> {{
    let mut buffer = [0; 9];
    reader.read_exact(&mut buffer[0..1])?;
    let first_byte = buffer[0];
    let size = varint_size_from_first_byte(first_byte) as usize;

    reader.read_exact(&mut buffer[1..size])?;

    let mut x = u64::from(first_byte) >> size;
    let mut bits_read = 8_usize.saturating_sub(size);

    for byte in buffer.iter().skip(1) {{
        x |= u64::from(*byte) << bits_read;
        bits_read += 8;
    }}

    for i in 1..size {{
        x = x
            .checked_add(1_u64 << (i * 7))
            .ok_or_else(|| Error::new(ErrorKind::InvalidData, \"Error decoding varint.\"))?;
    }}

    Ok(x)
}}

#[rustfmt::skip]
fn non_varint_field_header_size(index: u64, value_size: u64) -> u64 {{
    match value_size {{
        0 => varint_size_from_value((index << 2) | 0b00),
        8 => varint_size_from_value((index << 2) | 0b01),
        size => varint_size_from_value((index << 2) | 0b10) + varint_size_from_value(size),
    }}
}}

#[rustfmt::skip]
fn varint_field_header_size(index: u64) -> u64 {{
    varint_size_from_value((index << 2) | 0b11)
}}

#[rustfmt::skip]
fn serialize_non_varint_field_header<T: Write>(
    writer: &mut T,
    index: u64,
    payload_size: u64,
) -> io::Result<()> {{
    match payload_size {{
        0 => serialize_varint((index << 2) | 0b00, writer),
        8 => serialize_varint((index << 2) | 0b01, writer),
        size => {{
            serialize_varint((index << 2) | 0b10, writer)?;
            serialize_varint(size, writer)
        }}
    }}
}}

#[rustfmt::skip]
fn serialize_varint_field_header<T: Write>(writer: &mut T, index: u64) -> io::Result<()> {{
    serialize_varint((index << 2) | 0b11, writer)
}}

#[rustfmt::skip]
fn deserialize_field_header<T: BufRead>(reader: &mut T) -> io::Result<(u64, u64)> {{
    let tag = deserialize_varint(&mut *reader)?;

    let index = tag >> 2;

    let size = match tag & 0b11 {{
        0b00 => 0,
        0b01 => 8,
        0b10 => deserialize_varint(&mut *reader)?,
        0b11 => {{
            let buffer = (&mut *reader).fill_buf()?;

            if buffer.is_empty() {{
                return Err(Error::new(ErrorKind::UnexpectedEof, \"Error decoding field.\"));
            }}

            u64::from(varint_size_from_first_byte(buffer[0]))
        }}
        _ => panic!(),
    }};

    Ok((index, size))
}}

#[rustfmt::skip]
fn skip<T: BufRead>(reader: &mut T, mut amount: usize) -> io::Result<()> {{
    while amount > 0 {{
        let buffer = reader.fill_buf()?;
        let num_bytes_to_consume = min(buffer.len(), amount);
        reader.consume(num_bytes_to_consume);
        amount -= num_bytes_to_consume;
    }}

    Ok(())
}}

#[rustfmt::skip]
pub trait Serialize {{
    fn size(&self) -> u64;

    fn serialize<T: Write>(&self, writer: &mut T) -> io::Result<()>;
}}

#[rustfmt::skip]
pub trait Deserialize {{
    fn deserialize<T>(reader: &mut T) -> io::Result<Self>
    where
        Self: Sized,
        T: BufRead;
}}",
            typical_version,
        )
        .unwrap();

        // The `unwrap` is safe because the `std::fmt::Write` impl for `String` is infallible.
        writeln!(&mut buffer).unwrap();

        // The `unwrap` is safe because the `std::fmt::Write` impl for `String` is infallible.
        write_module_contents(
            &mut buffer,
            0,
            &schema::Namespace { components: vec![] },
            &tree.children,
            &tree.schema,
        )
        .unwrap();
    }

    buffer
}

// Insert a schema into a module.
fn insert_schema(module: &mut Module, namespace: &schema::Namespace, schema: schema::Schema) {
    let mut iter = namespace.components.iter();

    if let Some(head) = iter.next() {
        if let Some(child) = module.children.get_mut(head) {
            insert_schema(
                child,
                &schema::Namespace {
                    components: iter.cloned().collect(),
                },
                schema,
            );
        } else {
            let mut child = Module {
                children: BTreeMap::new(),
                schema: schema::Schema {
                    imports: BTreeMap::new(),
                    declarations: BTreeMap::new(),
                },
            };

            insert_schema(
                &mut child,
                &schema::Namespace {
                    components: iter.cloned().collect(),
                },
                schema,
            );

            module.children.insert(head.clone(), child);
        }
    } else {
        module.schema = schema;
    }
}

// Write a module, including a trailing line break.
fn write_module<T: Write>(
    buffer: &mut T,
    indentation: usize,
    namespace: &schema::Namespace,
    name: &Identifier,
    module: &Module,
) -> Result<(), fmt::Error> {
    if indentation == 0 {
        write_indentation(buffer, indentation)?;
        writeln!(buffer, "#[rustfmt::skip]")?;
    }

    write_indentation(buffer, indentation)?;
    write!(buffer, "pub mod ")?;
    write_identifier(buffer, name, Snake, None)?;
    writeln!(buffer, " {{")?;

    let mut new_namespace = namespace.clone();
    new_namespace.components.push(name.clone());

    write_module_contents(
        buffer,
        indentation + 1,
        &new_namespace,
        &module.children,
        &module.schema,
    )?;

    write_indentation(buffer, indentation)?;
    writeln!(buffer, "}}")?;

    Ok(())
}

// Write the contents of a module, including a trailing line break if there was anything to render.
fn write_module_contents<T: Write>(
    buffer: &mut T,
    indentation: usize,
    namespace: &schema::Namespace,
    children: &BTreeMap<Identifier, Module>,
    schema: &schema::Schema,
) -> Result<(), fmt::Error> {
    let schema_empty = schema.declarations.is_empty();

    for (i, (child_name, child)) in children.iter().enumerate() {
        write_module(buffer, indentation, namespace, child_name, child)?;

        if i < children.len() - 1 || !schema_empty {
            writeln!(buffer)?;
        }
    }

    write_schema(buffer, indentation, namespace, schema)?;

    Ok(())
}

// Write a schema, including a trailing line break if there was anything to render.
#[allow(clippy::too_many_lines)]
fn write_schema<T: Write>(
    buffer: &mut T,
    indentation: usize,
    namespace: &schema::Namespace,
    schema: &schema::Schema,
) -> Result<(), fmt::Error> {
    // Construct a map from import name to namespace.
    let mut imports = BTreeMap::new();
    for (name, import) in &schema.imports {
        // The unwrap is safe due to [ref:namespace_populated].
        imports.insert(name.clone(), import.namespace.clone().unwrap());
    }

    // Write the declarations.
    let mut iter = schema.declarations.iter().peekable();
    while let Some((name, declaration)) = iter.next() {
        match &declaration.variant {
            schema::DeclarationVariant::Struct(fields) => {
                write_struct(buffer, indentation, &imports, namespace, name, fields, Out)?;

                writeln!(buffer)?;

                write_struct(buffer, indentation, &imports, namespace, name, fields, In)?;

                writeln!(buffer)?;

                write_indentation(buffer, indentation)?;
                write!(buffer, "impl ")?;
                write_supers(buffer, indentation)?;
                write!(buffer, "Serialize for ")?;
                write_identifier(buffer, name, Pascal, Some(Out))?;
                writeln!(buffer, " {{")?;
                write_indentation(buffer, indentation + 1)?;
                writeln!(buffer, "fn size(&self) -> u64 {{")?;
                if fields.is_empty() {
                    write_indentation(buffer, indentation + 2)?;
                    writeln!(buffer, "0")?;
                }
                for (i, field) in fields.iter().enumerate() {
                    let is_first = i == 0;
                    let is_last = i == fields.len() - 1;
                    if is_first {
                        write_indentation(buffer, indentation + 2)?;
                    }
                    match field.cardinality {
                        schema::Cardinality::Optional => {
                            write!(buffer, "self.")?;
                            write_identifier(buffer, &field.name, Snake, None)?;
                            writeln!(buffer, ".as_ref().map_or(0, |payload| {{")?;
                        }
                        schema::Cardinality::Required | schema::Cardinality::Unstable => {
                            writeln!(buffer, "({{")?;
                            write_indentation(buffer, indentation + 3)?;
                            write!(buffer, "let payload = &self.")?;
                            write_identifier(buffer, &field.name, Snake, None)?;
                            writeln!(buffer, ";")?;
                        }
                    }
                    write_indentation(buffer, indentation + 3)?;
                    write!(buffer, "let payload_size = ")?;
                    write_size_calculation_invocation(buffer, indentation, &field.r#type)?;
                    writeln!(buffer, ";")?;
                    write_indentation(buffer, indentation + 3)?;
                    write_supers(buffer, indentation)?;
                    if varint_encoded(&field.r#type) {
                        writeln!(
                            buffer,
                            "varint_field_header_size({}) + payload_size",
                            field.index,
                        )?;
                    } else {
                        writeln!(
                            buffer,
                            "non_varint_field_header_size({}, payload_size) + payload_size",
                            field.index,
                        )?;
                    }
                    write_indentation(buffer, indentation + 2)?;
                    write!(buffer, "}})")?;
                    if is_last {
                        writeln!(buffer)?;
                    } else {
                        write!(buffer, " + ")?;
                    }
                }
                write_indentation(buffer, indentation + 1)?;
                writeln!(buffer, "}}")?;
                writeln!(buffer)?;
                write_indentation(buffer, indentation + 1)?;
                writeln!(
                    buffer,
                    "fn serialize<T: ::std::io::Write>(&self, writer: &mut T) -> \
                        ::std::io::Result<()> {{",
                )?;
                for field in fields {
                    match field.cardinality {
                        schema::Cardinality::Optional => {
                            write_indentation(buffer, indentation + 2)?;
                            write!(buffer, "if let Some(payload) = &self.")?;
                            write_identifier(buffer, &field.name, Snake, None)?;
                            writeln!(buffer, " {{")?;
                        }
                        schema::Cardinality::Required | schema::Cardinality::Unstable => {
                            write_indentation(buffer, indentation + 2)?;
                            writeln!(buffer, "{{")?;
                            write_indentation(buffer, indentation + 3)?;
                            write!(buffer, "let payload = &self.")?;
                            write_identifier(buffer, &field.name, Snake, None)?;
                            writeln!(buffer, ";")?;
                        }
                    }
                    write_indentation(buffer, indentation + 3)?;
                    write!(buffer, "let payload_size = ")?;
                    write_size_calculation_invocation(buffer, indentation, &field.r#type)?;
                    writeln!(buffer, ";")?;
                    write_indentation(buffer, indentation + 3)?;
                    write_supers(buffer, indentation)?;
                    if varint_encoded(&field.r#type) {
                        write!(buffer, "serialize_varint_field_header")?;
                        writeln!(buffer, "(writer, {})?;", field.index)?;
                    } else {
                        write!(buffer, "serialize_non_varint_field_header")?;
                        writeln!(buffer, "(writer, {}, payload_size)?;", field.index)?;
                    }
                    write_serialization_invocation(
                        buffer,
                        indentation + 3,
                        indentation,
                        &field.r#type,
                    )?;
                    write_indentation(buffer, indentation + 2)?;
                    writeln!(buffer, "}}")?;
                    writeln!(buffer)?;
                }
                write_indentation(buffer, indentation + 2)?;
                writeln!(buffer, "Ok(())")?;
                write_indentation(buffer, indentation + 1)?;
                writeln!(buffer, "}}")?;
                write_indentation(buffer, indentation)?;
                writeln!(buffer, "}}")?;

                writeln!(buffer)?;

                write_indentation(buffer, indentation)?;
                write!(buffer, "impl ")?;
                write_supers(buffer, indentation)?;
                write!(buffer, "Deserialize for ")?;
                write_identifier(buffer, name, Pascal, Some(In))?;
                writeln!(buffer, " {{")?;
                write_indentation(buffer, indentation + 1)?;
                writeln!(
                    buffer,
                    "fn deserialize<T>(reader: &mut T) -> ::std::io::Result<Self>",
                )?;
                write_indentation(buffer, indentation + 1)?;
                writeln!(buffer, "where")?;
                write_indentation(buffer, indentation + 2)?;
                writeln!(buffer, "Self: Sized,")?;
                write_indentation(buffer, indentation + 2)?;
                writeln!(buffer, "T: ::std::io::BufRead,")?;
                write_indentation(buffer, indentation + 1)?;
                writeln!(buffer, "{{")?;
                if !fields.is_empty() {
                    for field in fields {
                        write_indentation(buffer, indentation + 2)?;
                        write!(buffer, "let mut ")?;
                        write_identifier(buffer, &field.name, Snake, None)?;
                        write!(buffer, ": Option<")?;
                        write_type(buffer, &imports, namespace, &field.r#type, In)?;
                        writeln!(buffer, "> = None;")?;
                    }
                    writeln!(buffer)?;
                }
                write_indentation(buffer, indentation + 2)?;
                writeln!(buffer, "loop {{")?;
                write_indentation(buffer, indentation + 3)?;
                write!(buffer, "let (index, size) = match ")?;
                write_supers(buffer, indentation)?;
                writeln!(buffer, "deserialize_field_header(&mut *reader) {{")?;
                write_indentation(buffer, indentation + 4)?;
                writeln!(buffer, "Ok(header) => header,")?;
                write_indentation(buffer, indentation + 4)?;
                writeln!(buffer, "Err(err) => {{")?;
                write_indentation(buffer, indentation + 5)?;
                writeln!(
                    buffer,
                    "if let std::io::ErrorKind::UnexpectedEof = err.kind() {{",
                )?;
                write_indentation(buffer, indentation + 6)?;
                writeln!(buffer, "break;")?;
                write_indentation(buffer, indentation + 5)?;
                writeln!(buffer, "}}")?;
                writeln!(buffer)?;
                write_indentation(buffer, indentation + 5)?;
                writeln!(buffer, "return Err(err);")?;
                write_indentation(buffer, indentation + 4)?;
                writeln!(buffer, "}}")?;
                write_indentation(buffer, indentation + 3)?;
                writeln!(buffer, "}};")?;
                writeln!(buffer)?;
                write_indentation(buffer, indentation + 3)?;
                writeln!(
                    buffer,
                    "let mut sub_reader = ::std::io::Read::take(&mut *reader, size);",
                )?;
                writeln!(buffer)?;
                write_indentation(buffer, indentation + 3)?;
                writeln!(buffer, "match index {{")?;
                for field in fields {
                    write_indentation(buffer, indentation + 4)?;
                    writeln!(buffer, "{} => {{", field.index)?;
                    write_deserialization_invocation(
                        buffer,
                        indentation + 5,
                        indentation,
                        &imports,
                        namespace,
                        &field.r#type,
                    )?;
                    write_indentation(buffer, indentation + 5)?;
                    write_identifier(buffer, &field.name, Snake, None)?;
                    writeln!(buffer, ".get_or_insert(payload);")?;
                    write_indentation(buffer, indentation + 4)?;
                    writeln!(buffer, "}}")?;
                }
                write_indentation(buffer, indentation + 4)?;
                writeln!(buffer, "_ => {{")?;
                write_indentation(buffer, indentation + 5)?;
                write_supers(buffer, indentation)?;
                writeln!(buffer, "skip(&mut sub_reader, size as usize)?;")?;
                write_indentation(buffer, indentation + 4)?;
                writeln!(buffer, "}}")?;
                write_indentation(buffer, indentation + 3)?;
                writeln!(buffer, "}}")?;
                write_indentation(buffer, indentation + 2)?;
                writeln!(buffer, "}}")?;
                writeln!(buffer)?;
                if fields.iter().any(|field| match field.cardinality {
                    schema::Cardinality::Optional | schema::Cardinality::Unstable => false,
                    schema::Cardinality::Required => true,
                }) {
                    write_indentation(buffer, indentation + 2)?;
                    write!(buffer, "if ")?;
                    let mut first = true;
                    for field in fields {
                        match field.cardinality {
                            schema::Cardinality::Optional | schema::Cardinality::Unstable => {}
                            schema::Cardinality::Required => {
                                if first {
                                    first = false;
                                } else {
                                    write!(buffer, " || ")?;
                                }
                                write_identifier(buffer, &field.name, Snake, None)?;
                                write!(buffer, ".is_none()")?;
                            }
                        }
                    }
                    writeln!(buffer, " {{")?;
                    write_indentation(buffer, indentation + 3)?;
                    writeln!(buffer, "return Err(::std::io::Error::new(")?;
                    write_indentation(buffer, indentation + 4)?;
                    writeln!(buffer, "::std::io::ErrorKind::InvalidData,")?;
                    write_indentation(buffer, indentation + 4)?;
                    writeln!(buffer, "\"Struct missing one or more field(s).\",")?;
                    write_indentation(buffer, indentation + 3)?;
                    writeln!(buffer, "));")?;
                    write_indentation(buffer, indentation + 2)?;
                    writeln!(buffer, "}}")?;
                    writeln!(buffer)?;
                }
                write_indentation(buffer, indentation + 2)?;
                write!(buffer, "Ok(")?;
                write_identifier(buffer, name, Pascal, Some(In))?;
                writeln!(buffer, " {{")?;
                for field in fields {
                    write_indentation(buffer, indentation + 3)?;
                    write_identifier(buffer, &field.name, Snake, None)?;
                    match field.cardinality {
                        schema::Cardinality::Optional | schema::Cardinality::Unstable => {}
                        schema::Cardinality::Required => {
                            write!(buffer, ": ")?;
                            write_identifier(buffer, &field.name, Snake, None)?;
                            write!(buffer, ".unwrap()")?;
                        }
                    }
                    writeln!(buffer, ",")?;
                }
                write_indentation(buffer, indentation + 2)?;
                writeln!(buffer, "}})")?;
                write_indentation(buffer, indentation + 1)?;
                writeln!(buffer, "}}")?;
                write_indentation(buffer, indentation)?;
                writeln!(buffer, "}}")?;

                writeln!(buffer)?;

                write_indentation(buffer, indentation)?;
                write!(buffer, "impl From<")?;
                write_identifier(buffer, name, Pascal, Some(Out))?;
                write!(buffer, "> for ")?;
                write_identifier(buffer, name, Pascal, Some(In))?;
                writeln!(buffer, " {{")?;
                write_indentation(buffer, indentation + 1)?;
                write!(buffer, "fn from(message: ")?;
                write_identifier(buffer, name, Pascal, Some(Out))?;
                writeln!(buffer, ") -> Self {{")?;
                write_indentation(buffer, indentation + 2)?;
                write_identifier(buffer, name, Pascal, Some(In))?;
                writeln!(buffer, " {{")?;
                for field in fields {
                    match field.cardinality {
                        schema::Cardinality::Optional => {
                            write_indentation(buffer, indentation + 3)?;
                            write_identifier(buffer, &field.name, Snake, None)?;
                            write!(buffer, ": message.")?;
                            write_identifier(buffer, &field.name, Snake, None)?;
                            writeln!(buffer, ".map(|payload| payload.into()),")?;
                        }
                        schema::Cardinality::Required => {
                            write_indentation(buffer, indentation + 3)?;
                            write_identifier(buffer, &field.name, Snake, None)?;
                            write!(buffer, ": message.")?;
                            write_identifier(buffer, &field.name, Snake, None)?;
                            writeln!(buffer, ".into(),")?;
                        }
                        schema::Cardinality::Unstable => {
                            write_indentation(buffer, indentation + 3)?;
                            write_identifier(buffer, &field.name, Snake, None)?;
                            write!(buffer, ": Some(message.")?;
                            write_identifier(buffer, &field.name, Snake, None)?;
                            writeln!(buffer, ".into()),")?;
                        }
                    }
                }
                write_indentation(buffer, indentation + 2)?;
                writeln!(buffer, "}}")?;
                write_indentation(buffer, indentation + 1)?;
                writeln!(buffer, "}}")?;
                write_indentation(buffer, indentation)?;
                writeln!(buffer, "}}")?;
            }
            schema::DeclarationVariant::Choice(fields) => {
                write_choice(buffer, indentation, &imports, namespace, name, fields, Out)?;

                writeln!(buffer)?;

                write_choice(buffer, indentation, &imports, namespace, name, fields, In)?;

                writeln!(buffer)?;

                write_indentation(buffer, indentation)?;
                write!(buffer, "impl ")?;
                write_supers(buffer, indentation)?;
                write!(buffer, "Serialize for ")?;
                write_identifier(buffer, name, Pascal, Some(Out))?;
                writeln!(buffer, " {{")?;
                write_indentation(buffer, indentation + 1)?;
                writeln!(buffer, "fn size(&self) -> u64 {{")?;
                write_indentation(buffer, indentation + 2)?;
                // [tag:empty_enum_ref_match] We match on `self*` instead of `self` due to
                // https://github.com/rust-lang/rust/issues/78123.
                writeln!(buffer, "match *self {{")?;
                for field in fields {
                    write_indentation(buffer, indentation + 3)?;
                    write_identifier(buffer, name, Pascal, Some(Out))?;
                    write!(buffer, "::")?;
                    write_identifier(buffer, &field.name, Pascal, None)?;
                    match field.cardinality {
                        schema::Cardinality::Optional | schema::Cardinality::Unstable => {
                            writeln!(buffer, "(ref payload, ref fallback) => {{")?;
                        }
                        schema::Cardinality::Required => {
                            writeln!(buffer, "(ref payload) => {{")?;
                        }
                    }
                    write_indentation(buffer, indentation + 4)?;
                    write!(buffer, "let payload_size = ")?;
                    write_size_calculation_invocation(buffer, indentation, &field.r#type)?;
                    writeln!(buffer, ";")?;
                    write_indentation(buffer, indentation + 4)?;
                    write_supers(buffer, indentation)?;
                    if varint_encoded(&field.r#type) {
                        writeln!(buffer, "varint_field_header_size({}) +", field.index)?;
                    } else {
                        writeln!(
                            buffer,
                            "non_varint_field_header_size({}, payload_size) +",
                            field.index,
                        )?;
                    }
                    write_indentation(buffer, indentation + 5)?;
                    write!(buffer, "payload_size")?;
                    match field.cardinality {
                        schema::Cardinality::Optional | schema::Cardinality::Unstable => {
                            writeln!(buffer, " +")?;
                            write_indentation(buffer, indentation + 5)?;
                            writeln!(buffer, "fallback.size()")?;
                        }
                        schema::Cardinality::Required => {
                            writeln!(buffer)?;
                        }
                    }
                    write_indentation(buffer, indentation + 3)?;
                    writeln!(buffer, "}}")?;
                }
                write_indentation(buffer, indentation + 2)?;
                writeln!(buffer, "}}")?;
                write_indentation(buffer, indentation + 1)?;
                writeln!(buffer, "}}")?;
                writeln!(buffer)?;
                write_indentation(buffer, indentation + 1)?;
                writeln!(
                    buffer,
                    "fn serialize<T: ::std::io::Write>(&self, writer: &mut T) -> \
                        ::std::io::Result<()> {{",
                )?;
                write_indentation(buffer, indentation + 2)?;
                writeln!(buffer, "match *self {{")?; // [ref:empty_enum_ref_match]
                for field in fields {
                    write_indentation(buffer, indentation + 3)?;
                    write_identifier(buffer, name, Pascal, Some(Out))?;
                    write!(buffer, "::")?;
                    write_identifier(buffer, &field.name, Pascal, None)?;
                    match field.cardinality {
                        schema::Cardinality::Optional | schema::Cardinality::Unstable => {
                            writeln!(buffer, "(ref payload, ref fallback) => {{")?;
                        }
                        schema::Cardinality::Required => {
                            writeln!(buffer, "(ref payload) => {{")?;
                        }
                    }
                    write_indentation(buffer, indentation + 4)?;
                    write_supers(buffer, indentation)?;
                    if varint_encoded(&field.r#type) {
                        writeln!(
                            buffer,
                            "serialize_varint_field_header(writer, {})?;",
                            field.index,
                        )?;
                    } else {
                        write!(
                            buffer,
                            "serialize_non_varint_field_header(writer, {}, ",
                            field.index,
                        )?;
                        write_size_calculation_invocation(buffer, indentation, &field.r#type)?;
                        writeln!(buffer, ")?;")?;
                    }
                    write_serialization_invocation(
                        buffer,
                        indentation + 4,
                        indentation,
                        &field.r#type,
                    )?;
                    match field.cardinality {
                        schema::Cardinality::Optional | schema::Cardinality::Unstable => {
                            write_indentation(buffer, indentation + 4)?;
                            writeln!(buffer, "fallback.serialize(writer)")?;
                        }
                        schema::Cardinality::Required => {
                            write_indentation(buffer, indentation + 4)?;
                            writeln!(buffer, "Ok(())")?;
                        }
                    }
                    write_indentation(buffer, indentation + 3)?;
                    writeln!(buffer, "}}")?;
                }
                write_indentation(buffer, indentation + 2)?;
                writeln!(buffer, "}}")?;
                write_indentation(buffer, indentation + 1)?;
                writeln!(buffer, "}}")?;
                write_indentation(buffer, indentation)?;
                writeln!(buffer, "}}")?;

                writeln!(buffer)?;

                write_indentation(buffer, indentation)?;
                write!(buffer, "impl ")?;
                write_supers(buffer, indentation)?;
                write!(buffer, "Deserialize for ")?;
                write_identifier(buffer, name, Pascal, Some(In))?;
                writeln!(buffer, " {{")?;
                write_indentation(buffer, indentation + 1)?;
                writeln!(
                    buffer,
                    "fn deserialize<T>(reader: &mut T) -> ::std::io::Result<Self>",
                )?;
                write_indentation(buffer, indentation + 1)?;
                writeln!(buffer, "where")?;
                write_indentation(buffer, indentation + 2)?;
                writeln!(buffer, "Self: Sized,")?;
                write_indentation(buffer, indentation + 2)?;
                writeln!(buffer, "T: ::std::io::BufRead,")?;
                write_indentation(buffer, indentation + 1)?;
                writeln!(buffer, "{{")?;
                write_indentation(buffer, indentation + 2)?;
                writeln!(buffer, "loop {{")?;
                write_indentation(buffer, indentation + 3)?;
                write!(buffer, "let (index, size) = ")?;
                write_supers(buffer, indentation)?;
                writeln!(buffer, "deserialize_field_header(&mut *reader)?;")?;
                writeln!(buffer)?;
                write_indentation(buffer, indentation + 3)?;
                writeln!(
                    buffer,
                    "let mut sub_reader = ::std::io::Read::take(&mut *reader, size);",
                )?;
                writeln!(buffer)?;
                write_indentation(buffer, indentation + 3)?;
                writeln!(buffer, "match index {{")?;
                for field in fields {
                    write_indentation(buffer, indentation + 4)?;
                    writeln!(buffer, "{} => {{", field.index)?;
                    write_deserialization_invocation(
                        buffer,
                        indentation + 5,
                        indentation,
                        &imports,
                        namespace,
                        &field.r#type,
                    )?;
                    match field.cardinality {
                        schema::Cardinality::Optional => {
                            write_indentation(buffer, indentation + 5)?;
                            write!(buffer, "let fallback = Box::new(<")?;
                            write_identifier(buffer, name, Pascal, Some(In))?;
                            write!(buffer, " as ")?;
                            write_supers(buffer, indentation)?;
                            writeln!(buffer, "Deserialize>::deserialize(&mut *reader)?);")?;
                            write_indentation(buffer, indentation + 5)?;
                            write!(buffer, "return Ok(")?;
                            write_identifier(buffer, name, Pascal, Some(In))?;
                            write!(buffer, "::")?;
                            write_identifier(buffer, &field.name, Pascal, None)?;
                            writeln!(buffer, "(payload, fallback));")?;
                        }
                        schema::Cardinality::Required | schema::Cardinality::Unstable => {
                            write_indentation(buffer, indentation + 5)?;
                            write!(buffer, "return Ok(")?;
                            write_identifier(buffer, name, Pascal, Some(In))?;
                            write!(buffer, "::")?;
                            write_identifier(buffer, &field.name, Pascal, None)?;
                            writeln!(buffer, "(payload));")?;
                        }
                    }
                    write_indentation(buffer, indentation + 4)?;
                    writeln!(buffer, "}}")?;
                }
                write_indentation(buffer, indentation + 4)?;
                writeln!(buffer, "_ => {{")?;
                write_indentation(buffer, indentation + 5)?;
                write_supers(buffer, indentation)?;
                writeln!(buffer, "skip(&mut sub_reader, size as usize)?;")?;
                write_indentation(buffer, indentation + 4)?;
                writeln!(buffer, "}}")?;
                write_indentation(buffer, indentation + 3)?;
                writeln!(buffer, "}}")?;
                write_indentation(buffer, indentation + 2)?;
                writeln!(buffer, "}}")?;
                write_indentation(buffer, indentation + 1)?;
                writeln!(buffer, "}}")?;
                write_indentation(buffer, indentation)?;
                writeln!(buffer, "}}")?;

                writeln!(buffer)?;

                write_indentation(buffer, indentation)?;
                write!(buffer, "impl From<")?;
                write_identifier(buffer, name, Pascal, Some(Out))?;
                write!(buffer, "> for ")?;
                write_identifier(buffer, name, Pascal, Some(In))?;
                writeln!(buffer, " {{")?;
                write_indentation(buffer, indentation + 1)?;
                write!(buffer, "fn from(message: ")?;
                write_identifier(buffer, name, Pascal, Some(Out))?;
                writeln!(buffer, ") -> Self {{")?;
                write_indentation(buffer, indentation + 2)?;
                writeln!(buffer, "match message {{")?;
                for field in fields {
                    write_indentation(buffer, indentation + 3)?;
                    write_identifier(buffer, name, Pascal, Some(Out))?;
                    write!(buffer, "::")?;
                    write_identifier(buffer, &field.name, Pascal, None)?;
                    write!(buffer, "(payload")?;
                    match field.cardinality {
                        schema::Cardinality::Optional => {
                            write!(buffer, ", fallback")?;
                        }
                        schema::Cardinality::Required => {}
                        schema::Cardinality::Unstable => {
                            write!(buffer, ", _")?;
                        }
                    }
                    write!(buffer, ") => ")?;
                    write_identifier(buffer, name, Pascal, Some(In))?;
                    write!(buffer, "::")?;
                    write_identifier(buffer, &field.name, Pascal, None)?;
                    match field.cardinality {
                        schema::Cardinality::Optional => {
                            writeln!(buffer, "(payload.into(), Box::new((*fallback).into())),")?;
                        }
                        schema::Cardinality::Required | schema::Cardinality::Unstable => {
                            writeln!(buffer, "(payload.into()),")?;
                        }
                    }
                }
                write_indentation(buffer, indentation + 2)?;
                writeln!(buffer, "}}")?;
                write_indentation(buffer, indentation + 1)?;
                writeln!(buffer, "}}")?;
                write_indentation(buffer, indentation)?;
                writeln!(buffer, "}}")?;
            }
        }

        if iter.peek().is_some() {
            writeln!(buffer)?;
        }
    }

    Ok(())
}

// Write a struct, including a trailing line break.
fn write_struct<T: Write>(
    buffer: &mut T,
    indentation: usize,
    imports: &BTreeMap<Identifier, schema::Namespace>,
    namespace: &schema::Namespace,
    name: &Identifier,
    fields: &[schema::Field],
    direction: Direction,
) -> Result<(), fmt::Error> {
    write_indentation(buffer, indentation)?;
    writeln!(buffer, "#[derive({})]", TRAITS_TO_DERIVE.join(", "))?;
    write_indentation(buffer, indentation)?;
    write!(buffer, "pub struct ")?;
    write_identifier(buffer, name, Pascal, Some(direction))?;
    writeln!(buffer, " {{")?;

    for field in fields {
        write_indentation(buffer, indentation + 1)?;
        write!(buffer, "pub ")?;
        write_identifier(buffer, &field.name, Snake, None)?;
        write!(buffer, ": ")?;
        match field.cardinality {
            schema::Cardinality::Optional => {
                write!(buffer, "Option<")?;
            }
            schema::Cardinality::Required => {}
            schema::Cardinality::Unstable => match direction {
                Direction::Out => {}
                Direction::In => {
                    write!(buffer, "Option<")?;
                }
            },
        }
        write_type(buffer, imports, namespace, &field.r#type, direction)?;
        match field.cardinality {
            schema::Cardinality::Optional => {
                write!(buffer, ">")?;
            }
            schema::Cardinality::Required => {}
            schema::Cardinality::Unstable => match direction {
                Direction::Out => {}
                Direction::In => {
                    write!(buffer, ">")?;
                }
            },
        }
        writeln!(buffer, ",")?;
    }

    write_indentation(buffer, indentation)?;
    writeln!(buffer, "}}")?;

    Ok(())
}

// Write a choice, including a trailing line break.
fn write_choice<T: Write>(
    buffer: &mut T,
    indentation: usize,
    imports: &BTreeMap<Identifier, schema::Namespace>,
    namespace: &schema::Namespace,
    name: &Identifier,
    fields: &[schema::Field],
    direction: Direction,
) -> Result<(), fmt::Error> {
    write_indentation(buffer, indentation)?;
    writeln!(buffer, "#[derive({})]", TRAITS_TO_DERIVE.join(", "))?;
    write_indentation(buffer, indentation)?;
    write!(buffer, "pub enum ")?;
    write_identifier(buffer, name, Pascal, Some(direction))?;
    writeln!(buffer, " {{")?;

    for field in fields {
        write_indentation(buffer, indentation + 1)?;
        write_identifier(buffer, &field.name, Pascal, None)?;
        write!(buffer, "(")?;
        write_type(buffer, imports, namespace, &field.r#type, direction)?;
        match field.cardinality {
            schema::Cardinality::Optional => {
                write!(buffer, ", Box<")?;
                write_identifier(buffer, name, Pascal, Some(direction))?;
                write!(buffer, ">")?;
            }
            schema::Cardinality::Required => {}
            schema::Cardinality::Unstable => match direction {
                Direction::Out => {
                    write!(buffer, ", Box<")?;
                    write_identifier(buffer, name, Pascal, Some(direction))?;
                    write!(buffer, ">")?;
                }
                Direction::In => {}
            },
        }
        writeln!(buffer, "),")?;
    }

    write_indentation(buffer, indentation)?;
    writeln!(buffer, "}}")?;

    Ok(())
}

// Write a type.
fn write_type<T: Write>(
    buffer: &mut T,
    imports: &BTreeMap<Identifier, schema::Namespace>,
    namespace: &schema::Namespace,
    r#type: &schema::Type,
    direction: Direction,
) -> Result<(), fmt::Error> {
    match &r#type.variant {
        schema::TypeVariant::Bool => {
            write!(buffer, "bool")?;
        }
        schema::TypeVariant::Bytes => {
            write!(buffer, "Vec<u8>")?;
        }
        schema::TypeVariant::F64 => {
            write!(buffer, "f64")?;
        }
        schema::TypeVariant::S64 => {
            write!(buffer, "i64")?;
        }
        schema::TypeVariant::String => {
            write!(buffer, "String")?;
        }
        schema::TypeVariant::U64 => {
            write!(buffer, "u64")?;
        }
        schema::TypeVariant::Unit => {
            write!(buffer, "()")?;
        }
        schema::TypeVariant::Custom(import, name) => {
            let type_namespace = schema::Namespace {
                components: import.as_ref().map_or_else(
                    || namespace.components.clone(),
                    |import| imports[import].components.clone(),
                ),
            };

            let (relative_type_namespace, ancestors) =
                relativize_namespace(&type_namespace, namespace);

            write_supers(buffer, ancestors)?;

            for component in relative_type_namespace.components {
                write_identifier(buffer, &component, Snake, None)?;
                write!(buffer, "::")?;
            }

            write_identifier(buffer, name, Pascal, Some(direction))?;
        }
    }

    Ok(())
}

// Write an identifier with an optional direction suffix in a way that Rust will be happy with.
fn write_identifier<T: Write>(
    buffer: &mut T,
    identifier: &Identifier,
    case: CaseConvention,
    suffix: Option<Direction>,
) -> Result<(), fmt::Error> {
    let identifier_with_suffix = suffix.map_or_else(
        || identifier.clone(),
        |suffix| {
            identifier.join(
                &match suffix {
                    Direction::In => "In",
                    Direction::Out => "Out",
                }
                .into(),
            )
        },
    );

    let converted_identifier = match case {
        CaseConvention::Pascal => identifier_with_suffix.pascal_case(),
        CaseConvention::Snake => identifier_with_suffix.snake_case(),
    };

    if !converted_identifier.starts_with("r#")
        && RUST_KEYWORDS
            .iter()
            .any(|keyword| converted_identifier == *keyword)
    {
        write!(buffer, "r#")?;
    }

    write!(buffer, "{}", converted_identifier)?;

    Ok(())
}

// Write the given level of indentation.
fn write_indentation<T: Write>(buffer: &mut T, indentation: usize) -> Result<(), fmt::Error> {
    for _ in 0..indentation {
        write!(buffer, "{}", INDENTATION)?;
    }

    Ok(())
}

// Write a series of `super::super::...`.
fn write_supers<T: Write>(buffer: &mut T, count: usize) -> Result<(), fmt::Error> {
    for _ in 0..count {
        write!(buffer, "super::")?;
    }

    Ok(())
}

// Write the logic to invoke the size calculation logic for a value.
fn write_size_calculation_invocation<T: Write>(
    buffer: &mut T,
    supers: usize,
    r#type: &schema::Type,
) -> Result<(), fmt::Error> {
    match &r#type.variant {
        schema::TypeVariant::Bool => write!(buffer, "1_u64"),
        schema::TypeVariant::Bytes | schema::TypeVariant::String => {
            write!(buffer, "payload.len() as u64")
        }
        schema::TypeVariant::F64 => write!(buffer, "8_u64"),
        schema::TypeVariant::S64 => {
            write_supers(buffer, supers)?;
            write!(buffer, "varint_size_from_value(")?;
            write_supers(buffer, supers)?;
            write!(buffer, "zigzag_encode(*payload))")
        }
        schema::TypeVariant::U64 => {
            write_supers(buffer, supers)?;
            write!(buffer, "varint_size_from_value(*payload)")
        }
        schema::TypeVariant::Unit => write!(buffer, "0_u64"),
        schema::TypeVariant::Custom(_, _) => write!(buffer, "payload.size()"),
    }
}

// Write the logic to invoke the serialization logic for a value, including a trailing line break.
fn write_serialization_invocation<T: Write>(
    buffer: &mut T,
    indentation: usize,
    supers: usize,
    r#type: &schema::Type,
) -> Result<(), fmt::Error> {
    write_indentation(buffer, indentation)?;

    match &r#type.variant {
        schema::TypeVariant::Bool => {
            write_supers(buffer, supers)?;
            writeln!(buffer, "serialize_varint(*payload as u64, writer)?;")
        }
        schema::TypeVariant::Bytes => writeln!(buffer, "writer.write_all(payload)?;"),
        schema::TypeVariant::F64 => writeln!(buffer, "writer.write_all(&payload.to_le_bytes())?;"),
        schema::TypeVariant::S64 => {
            write_supers(buffer, supers)?;
            write!(buffer, "serialize_varint(")?;
            write_supers(buffer, supers)?;
            writeln!(buffer, "zigzag_encode(*payload), writer)?;")
        }
        schema::TypeVariant::String => writeln!(buffer, "writer.write_all(payload.as_bytes())?;"),
        schema::TypeVariant::U64 => {
            write_supers(buffer, supers)?;
            writeln!(buffer, "serialize_varint(*payload, writer)?;")
        }
        schema::TypeVariant::Unit => writeln!(buffer, "();"),
        schema::TypeVariant::Custom(_, _) => writeln!(buffer, "payload.serialize(writer)?;"),
    }
}

// Write the logic to invoke the deserialization logic for a value, including a trailing line break.
fn write_deserialization_invocation<T: Write>(
    buffer: &mut T,
    indentation: usize,
    supers: usize,
    imports: &BTreeMap<Identifier, schema::Namespace>,
    namespace: &schema::Namespace,
    r#type: &schema::Type,
) -> Result<(), fmt::Error> {
    write_indentation(buffer, indentation)?;

    match &r#type.variant {
        schema::TypeVariant::Bool => {
            writeln!(buffer, "let mut buffer = [0_u8];")?;
            write_indentation(buffer, indentation)?;
            writeln!(
                buffer,
                "::std::io::Read::read_exact(&mut sub_reader, &mut buffer[..])?;",
            )?;
            write_indentation(buffer, indentation)?;
            writeln!(buffer, "let payload = buffer[0] != 0b0000_0001;")
        }
        schema::TypeVariant::Bytes => {
            writeln!(buffer, "let mut payload = vec![];")?;
            write_indentation(buffer, indentation)?;
            writeln!(
                buffer,
                "::std::io::Read::read_to_end(&mut sub_reader, &mut payload)?;",
            )
        }
        schema::TypeVariant::F64 => {
            writeln!(buffer, "let mut buffer = [0; 8];")?;
            write_indentation(buffer, indentation)?;
            writeln!(
                buffer,
                "::std::io::Read::read_exact(&mut sub_reader, &mut buffer)?;",
            )?;
            write_indentation(buffer, indentation)?;
            writeln!(buffer, "let payload = f64::from_le_bytes(buffer);")
        }
        schema::TypeVariant::S64 => {
            write!(buffer, "let payload = ")?;
            write_supers(buffer, supers)?;
            write!(buffer, "zigzag_decode(")?;
            write_supers(buffer, supers)?;
            writeln!(buffer, "deserialize_varint(&mut sub_reader)?);")
        }
        schema::TypeVariant::String => {
            writeln!(buffer, "let mut buffer = vec![];")?;
            write_indentation(buffer, indentation)?;
            writeln!(
                buffer,
                "::std::io::Read::read_to_end(&mut sub_reader, &mut buffer)?;",
            )?;
            write_indentation(buffer, indentation)?;
            writeln!(
                buffer,
                "let payload = std::str::from_utf8(&buffer).map_or_else(",
            )?;
            write_indentation(buffer, indentation + 1)?;
            writeln!(
                buffer,
                "|err| Err(::std::io::Error::new(::std::io::ErrorKind::Other, err)),",
            )?;
            write_indentation(buffer, indentation + 1)?;
            writeln!(buffer, "|result| Ok(result.to_owned()),")?;
            write_indentation(buffer, indentation)?;
            writeln!(buffer, ")?;")
        }
        schema::TypeVariant::U64 => {
            write!(buffer, "let payload = ")?;
            write_supers(buffer, supers)?;
            writeln!(buffer, "deserialize_varint(&mut sub_reader)?;")
        }
        schema::TypeVariant::Unit => writeln!(buffer, "let payload = ();"),
        schema::TypeVariant::Custom(_, _) => {
            write!(buffer, "let payload = <")?;
            write_type(buffer, imports, namespace, r#type, In)?;
            write!(buffer, " as ")?;
            write_supers(buffer, supers)?;
            writeln!(buffer, "Deserialize>::deserialize(&mut sub_reader)?;")
        }
    }
}

// Determine whether a type is encoded as a varint.
fn varint_encoded(r#type: &schema::Type) -> bool {
    match &r#type.variant {
        schema::TypeVariant::Bool | schema::TypeVariant::S64 | schema::TypeVariant::U64 => true,
        schema::TypeVariant::Bytes
        | schema::TypeVariant::F64
        | schema::TypeVariant::String
        | schema::TypeVariant::Unit
        | schema::TypeVariant::Custom(_, _) => false,
    }
}

#[cfg(test)]
mod tests {
    use crate::{
        generate_rust::generate, parser::parse, schema, tokenizer::tokenize, validator::validate,
    };
    use std::{collections::BTreeMap, fs::read_to_string, path::Path};

    #[allow(clippy::too_many_lines)]
    #[test]
    fn generate_example() {
        let foo_namespace = schema::Namespace {
            components: vec!["metasyntactic".into(), "foo".into()],
        };
        let foo_path = Path::new("integration-tests/types/metasyntactic/foo.t").to_owned();
        let foo_contents = read_to_string(&foo_path).unwrap();

        let bar_namespace = schema::Namespace {
            components: vec!["metasyntactic".into(), "bar".into()],
        };
        let bar_path = Path::new("integration-tests/types/metasyntactic/bar.t").to_owned();
        let bar_contents = read_to_string(&bar_path).unwrap();

        let main_namespace = schema::Namespace {
            components: vec!["main".into()],
        };
        let main_path = Path::new("integration-tests/types/main.t").to_owned();
        let main_contents = read_to_string(&main_path).unwrap();

        let foo_tokens = tokenize(&foo_path, &foo_contents).unwrap();
        let foo_schema = parse(&foo_path, &foo_contents, &foo_tokens).unwrap();

        let bar_tokens = tokenize(&bar_path, &bar_contents).unwrap();
        let bar_schema = parse(&bar_path, &bar_contents, &bar_tokens).unwrap();

        let main_tokens = tokenize(&main_path, &main_contents).unwrap();
        let mut main_schema = parse(&main_path, &main_contents, &main_tokens).unwrap();
        main_schema
            .imports
            .get_mut(&"foo".into())
            .unwrap()
            .namespace = Some(foo_namespace.clone());
        main_schema
            .imports
            .get_mut(&"bar".into())
            .unwrap()
            .namespace = Some(bar_namespace.clone());

        let mut schemas = BTreeMap::new();
        schemas.insert(foo_namespace, (foo_schema, foo_path, foo_contents));
        schemas.insert(bar_namespace, (bar_schema, bar_path, bar_contents));
        schemas.insert(main_namespace, (main_schema, main_path, main_contents));
        validate(&schemas).unwrap();

        assert_eq!(
            generate("0.0.0", schemas),
            "\
// This file was automatically generated by Typical 0.0.0.
// Visit https://github.com/stepchowfun/typical for more information.

#![allow(clippy::all, clippy::pedantic, clippy::nursery, warnings)]

#[rustfmt::skip]
use std::{
    cmp::min,
    io::{self, BufRead, Error, ErrorKind, Write},
    mem::transmute,
};

#[rustfmt::skip]
fn zigzag_encode(value: i64) -> u64 {
    unsafe {
        transmute::<i64, u64>(value >> 63) ^ transmute::<i64, u64>(value << 1)
    }
}

#[rustfmt::skip]
fn zigzag_decode(value: u64) -> i64 {
    unsafe {
        transmute::<u64, i64>(value >> 1) ^ -transmute::<u64, i64>(value & 1)
    }
}

#[rustfmt::skip]
fn varint_size_from_value(value: u64) -> u64 {
    let mut size = 1_u64;
    let mut upper_bound_exclusive = 0_u64;

    while size < 9_u64 {
        upper_bound_exclusive += 1_u64 << (size * 7_u64);

        if value < upper_bound_exclusive {
            break;
        }

        size += 1_u64;
    }

    size
}

#[rustfmt::skip]
fn varint_size_from_first_byte(first_byte: u8) -> u32 {
    first_byte.trailing_zeros() + 1
}

#[rustfmt::skip]
fn serialize_varint<T: Write>(value: u64, writer: &mut T) -> io::Result<()> {
    let size = varint_size_from_value(value);
    let size_minus_one = size - 1;

    let mut x = value;
    for i in 1..size {
        x -= 1_u64 << (i * 7);
    }

    writer.write_all(&[((x << size) | (1_u64 << size_minus_one)) as u8])?;
    x >>= 8_u64.saturating_sub(size);

    for _ in 0..size_minus_one {
        writer.write_all(&[x as u8])?;
        x >>= 8;
    }

    Ok(())
}

#[rustfmt::skip]
fn deserialize_varint<T: BufRead>(reader: &mut T) -> io::Result<u64> {
    let mut buffer = [0; 9];
    reader.read_exact(&mut buffer[0..1])?;
    let first_byte = buffer[0];
    let size = varint_size_from_first_byte(first_byte) as usize;

    reader.read_exact(&mut buffer[1..size])?;

    let mut x = u64::from(first_byte) >> size;
    let mut bits_read = 8_usize.saturating_sub(size);

    for byte in buffer.iter().skip(1) {
        x |= u64::from(*byte) << bits_read;
        bits_read += 8;
    }

    for i in 1..size {
        x = x
            .checked_add(1_u64 << (i * 7))
            .ok_or_else(|| Error::new(ErrorKind::InvalidData, \"Error decoding varint.\"))?;
    }

    Ok(x)
}

#[rustfmt::skip]
fn non_varint_field_header_size(index: u64, value_size: u64) -> u64 {
    match value_size {
        0 => varint_size_from_value((index << 2) | 0b00),
        8 => varint_size_from_value((index << 2) | 0b01),
        size => varint_size_from_value((index << 2) | 0b10) + varint_size_from_value(size),
    }
}

#[rustfmt::skip]
fn varint_field_header_size(index: u64) -> u64 {
    varint_size_from_value((index << 2) | 0b11)
}

#[rustfmt::skip]
fn serialize_non_varint_field_header<T: Write>(
    writer: &mut T,
    index: u64,
    payload_size: u64,
) -> io::Result<()> {
    match payload_size {
        0 => serialize_varint((index << 2) | 0b00, writer),
        8 => serialize_varint((index << 2) | 0b01, writer),
        size => {
            serialize_varint((index << 2) | 0b10, writer)?;
            serialize_varint(size, writer)
        }
    }
}

#[rustfmt::skip]
fn serialize_varint_field_header<T: Write>(writer: &mut T, index: u64) -> io::Result<()> {
    serialize_varint((index << 2) | 0b11, writer)
}

#[rustfmt::skip]
fn deserialize_field_header<T: BufRead>(reader: &mut T) -> io::Result<(u64, u64)> {
    let tag = deserialize_varint(&mut *reader)?;

    let index = tag >> 2;

    let size = match tag & 0b11 {
        0b00 => 0,
        0b01 => 8,
        0b10 => deserialize_varint(&mut *reader)?,
        0b11 => {
            let buffer = (&mut *reader).fill_buf()?;

            if buffer.is_empty() {
                return Err(Error::new(ErrorKind::UnexpectedEof, \"Error decoding field.\"));
            }

            u64::from(varint_size_from_first_byte(buffer[0]))
        }
        _ => panic!(),
    };

    Ok((index, size))
}

#[rustfmt::skip]
fn skip<T: BufRead>(reader: &mut T, mut amount: usize) -> io::Result<()> {
    while amount > 0 {
        let buffer = reader.fill_buf()?;
        let num_bytes_to_consume = min(buffer.len(), amount);
        reader.consume(num_bytes_to_consume);
        amount -= num_bytes_to_consume;
    }

    Ok(())
}

#[rustfmt::skip]
pub trait Serialize {
    fn size(&self) -> u64;

    fn serialize<T: Write>(&self, writer: &mut T) -> io::Result<()>;
}

#[rustfmt::skip]
pub trait Deserialize {
    fn deserialize<T>(reader: &mut T) -> io::Result<Self>
    where
        Self: Sized,
        T: BufRead;
}

#[rustfmt::skip]
pub mod main {
    #[derive(Clone, Debug)]
    pub enum EmptyChoiceOut {
    }

    #[derive(Clone, Debug)]
    pub enum EmptyChoiceIn {
    }

    impl super::Serialize for EmptyChoiceOut {
        fn size(&self) -> u64 {
            match *self {
            }
        }

        fn serialize<T: ::std::io::Write>(&self, writer: &mut T) -> ::std::io::Result<()> {
            match *self {
            }
        }
    }

    impl super::Deserialize for EmptyChoiceIn {
        fn deserialize<T>(reader: &mut T) -> ::std::io::Result<Self>
        where
            Self: Sized,
            T: ::std::io::BufRead,
        {
            loop {
                let (index, size) = super::deserialize_field_header(&mut *reader)?;

                let mut sub_reader = ::std::io::Read::take(&mut *reader, size);

                match index {
                    _ => {
                        super::skip(&mut sub_reader, size as usize)?;
                    }
                }
            }
        }
    }

    impl From<EmptyChoiceOut> for EmptyChoiceIn {
        fn from(message: EmptyChoiceOut) -> Self {
            match message {
            }
        }
    }

    #[derive(Clone, Debug)]
    pub struct EmptyStructOut {
    }

    #[derive(Clone, Debug)]
    pub struct EmptyStructIn {
    }

    impl super::Serialize for EmptyStructOut {
        fn size(&self) -> u64 {
            0
        }

        fn serialize<T: ::std::io::Write>(&self, writer: &mut T) -> ::std::io::Result<()> {
            Ok(())
        }
    }

    impl super::Deserialize for EmptyStructIn {
        fn deserialize<T>(reader: &mut T) -> ::std::io::Result<Self>
        where
            Self: Sized,
            T: ::std::io::BufRead,
        {
            loop {
                let (index, size) = match super::deserialize_field_header(&mut *reader) {
                    Ok(header) => header,
                    Err(err) => {
                        if let std::io::ErrorKind::UnexpectedEof = err.kind() {
                            break;
                        }

                        return Err(err);
                    }
                };

                let mut sub_reader = ::std::io::Read::take(&mut *reader, size);

                match index {
                    _ => {
                        super::skip(&mut sub_reader, size as usize)?;
                    }
                }
            }

            Ok(EmptyStructIn {
            })
        }
    }

    impl From<EmptyStructOut> for EmptyStructIn {
        fn from(message: EmptyStructOut) -> Self {
            EmptyStructIn {
            }
        }
    }

    #[derive(Clone, Debug)]
    pub struct FooAndBarOut {
        pub x: super::metasyntactic::foo::FooOut,
        pub y: super::metasyntactic::bar::BarOut,
    }

    #[derive(Clone, Debug)]
    pub struct FooAndBarIn {
        pub x: super::metasyntactic::foo::FooIn,
        pub y: super::metasyntactic::bar::BarIn,
    }

    impl super::Serialize for FooAndBarOut {
        fn size(&self) -> u64 {
            ({
                let payload = &self.x;
                let payload_size = payload.size();
                super::non_varint_field_header_size(0, payload_size) + payload_size
            }) + ({
                let payload = &self.y;
                let payload_size = payload.size();
                super::non_varint_field_header_size(1, payload_size) + payload_size
            })
        }

        fn serialize<T: ::std::io::Write>(&self, writer: &mut T) -> ::std::io::Result<()> {
            {
                let payload = &self.x;
                let payload_size = payload.size();
                super::serialize_non_varint_field_header(writer, 0, payload_size)?;
                payload.serialize(writer)?;
            }

            {
                let payload = &self.y;
                let payload_size = payload.size();
                super::serialize_non_varint_field_header(writer, 1, payload_size)?;
                payload.serialize(writer)?;
            }

            Ok(())
        }
    }

    impl super::Deserialize for FooAndBarIn {
        fn deserialize<T>(reader: &mut T) -> ::std::io::Result<Self>
        where
            Self: Sized,
            T: ::std::io::BufRead,
        {
            let mut x: Option<super::metasyntactic::foo::FooIn> = None;
            let mut y: Option<super::metasyntactic::bar::BarIn> = None;

            loop {
                let (index, size) = match super::deserialize_field_header(&mut *reader) {
                    Ok(header) => header,
                    Err(err) => {
                        if let std::io::ErrorKind::UnexpectedEof = err.kind() {
                            break;
                        }

                        return Err(err);
                    }
                };

                let mut sub_reader = ::std::io::Read::take(&mut *reader, size);

                match index {
                    0 => {
                        let payload = <super::metasyntactic::foo::FooIn as super::Deserialize>::\
                            deserialize(&mut sub_reader)?;
                        x.get_or_insert(payload);
                    }
                    1 => {
                        let payload = <super::metasyntactic::bar::BarIn as super::Deserialize>::\
                            deserialize(&mut sub_reader)?;
                        y.get_or_insert(payload);
                    }
                    _ => {
                        super::skip(&mut sub_reader, size as usize)?;
                    }
                }
            }

            if x.is_none() || y.is_none() {
                return Err(::std::io::Error::new(
                    ::std::io::ErrorKind::InvalidData,
                    \"Struct missing one or more field(s).\",
                ));
            }

            Ok(FooAndBarIn {
                x: x.unwrap(),
                y: y.unwrap(),
            })
        }
    }

    impl From<FooAndBarOut> for FooAndBarIn {
        fn from(message: FooAndBarOut) -> Self {
            FooAndBarIn {
                x: message.x.into(),
                y: message.y.into(),
            }
        }
    }

    #[derive(Clone, Debug)]
    pub enum FooOrBarOut {
        X(super::metasyntactic::foo::FooOut),
        Y(super::metasyntactic::bar::BarOut),
    }

    #[derive(Clone, Debug)]
    pub enum FooOrBarIn {
        X(super::metasyntactic::foo::FooIn),
        Y(super::metasyntactic::bar::BarIn),
    }

    impl super::Serialize for FooOrBarOut {
        fn size(&self) -> u64 {
            match *self {
                FooOrBarOut::X(ref payload) => {
                    let payload_size = payload.size();
                    super::non_varint_field_header_size(0, payload_size) +
                        payload_size
                }
                FooOrBarOut::Y(ref payload) => {
                    let payload_size = payload.size();
                    super::non_varint_field_header_size(1, payload_size) +
                        payload_size
                }
            }
        }

        fn serialize<T: ::std::io::Write>(&self, writer: &mut T) -> ::std::io::Result<()> {
            match *self {
                FooOrBarOut::X(ref payload) => {
                    super::serialize_non_varint_field_header(writer, 0, payload.size())?;
                    payload.serialize(writer)?;
                    Ok(())
                }
                FooOrBarOut::Y(ref payload) => {
                    super::serialize_non_varint_field_header(writer, 1, payload.size())?;
                    payload.serialize(writer)?;
                    Ok(())
                }
            }
        }
    }

    impl super::Deserialize for FooOrBarIn {
        fn deserialize<T>(reader: &mut T) -> ::std::io::Result<Self>
        where
            Self: Sized,
            T: ::std::io::BufRead,
        {
            loop {
                let (index, size) = super::deserialize_field_header(&mut *reader)?;

                let mut sub_reader = ::std::io::Read::take(&mut *reader, size);

                match index {
                    0 => {
                        let payload = <super::metasyntactic::foo::FooIn as super::Deserialize>::\
                            deserialize(&mut sub_reader)?;
                        return Ok(FooOrBarIn::X(payload));
                    }
                    1 => {
                        let payload = <super::metasyntactic::bar::BarIn as super::Deserialize>::\
                            deserialize(&mut sub_reader)?;
                        return Ok(FooOrBarIn::Y(payload));
                    }
                    _ => {
                        super::skip(&mut sub_reader, size as usize)?;
                    }
                }
            }
        }
    }

    impl From<FooOrBarOut> for FooOrBarIn {
        fn from(message: FooOrBarOut) -> Self {
            match message {
                FooOrBarOut::X(payload) => FooOrBarIn::X(payload.into()),
                FooOrBarOut::Y(payload) => FooOrBarIn::Y(payload.into()),
            }
        }
    }
}

#[rustfmt::skip]
pub mod metasyntactic {
    pub mod bar {
        #[derive(Clone, Debug)]
        pub enum BarOut {
            TRequired(bool),
            URequired(Vec<u8>),
            VRequired(f64),
            WRequired(i64),
            XRequired(String),
            YRequired(u64),
            ZRequired(()),
            TUnstable(bool, Box<BarOut>),
            UUnstable(Vec<u8>, Box<BarOut>),
            VUnstable(f64, Box<BarOut>),
            WUnstable(i64, Box<BarOut>),
            XUnstable(String, Box<BarOut>),
            YUnstable(u64, Box<BarOut>),
            ZUnstable((), Box<BarOut>),
            TOptional(bool, Box<BarOut>),
            UOptional(Vec<u8>, Box<BarOut>),
            VOptional(f64, Box<BarOut>),
            WOptional(i64, Box<BarOut>),
            XOptional(String, Box<BarOut>),
            YOptional(u64, Box<BarOut>),
            ZOptional((), Box<BarOut>),
        }

        #[derive(Clone, Debug)]
        pub enum BarIn {
            TRequired(bool),
            URequired(Vec<u8>),
            VRequired(f64),
            WRequired(i64),
            XRequired(String),
            YRequired(u64),
            ZRequired(()),
            TUnstable(bool),
            UUnstable(Vec<u8>),
            VUnstable(f64),
            WUnstable(i64),
            XUnstable(String),
            YUnstable(u64),
            ZUnstable(()),
            TOptional(bool, Box<BarIn>),
            UOptional(Vec<u8>, Box<BarIn>),
            VOptional(f64, Box<BarIn>),
            WOptional(i64, Box<BarIn>),
            XOptional(String, Box<BarIn>),
            YOptional(u64, Box<BarIn>),
            ZOptional((), Box<BarIn>),
        }

        impl super::super::Serialize for BarOut {
            fn size(&self) -> u64 {
                match *self {
                    BarOut::TRequired(ref payload) => {
                        let payload_size = 1_u64;
                        super::super::varint_field_header_size(0) +
                            payload_size
                    }
                    BarOut::URequired(ref payload) => {
                        let payload_size = payload.len() as u64;
                        super::super::non_varint_field_header_size(1, payload_size) +
                            payload_size
                    }
                    BarOut::VRequired(ref payload) => {
                        let payload_size = 8_u64;
                        super::super::non_varint_field_header_size(2, payload_size) +
                            payload_size
                    }
                    BarOut::WRequired(ref payload) => {
                        let payload_size = super::super::varint_size_from_value(\
                            super::super::zigzag_encode(*payload));
                        super::super::varint_field_header_size(3) +
                            payload_size
                    }
                    BarOut::XRequired(ref payload) => {
                        let payload_size = payload.len() as u64;
                        super::super::non_varint_field_header_size(4, payload_size) +
                            payload_size
                    }
                    BarOut::YRequired(ref payload) => {
                        let payload_size = super::super::varint_size_from_value(*payload);
                        super::super::varint_field_header_size(5) +
                            payload_size
                    }
                    BarOut::ZRequired(ref payload) => {
                        let payload_size = 0_u64;
                        super::super::non_varint_field_header_size(6, payload_size) +
                            payload_size
                    }
                    BarOut::TUnstable(ref payload, ref fallback) => {
                        let payload_size = 1_u64;
                        super::super::varint_field_header_size(7) +
                            payload_size +
                            fallback.size()
                    }
                    BarOut::UUnstable(ref payload, ref fallback) => {
                        let payload_size = payload.len() as u64;
                        super::super::non_varint_field_header_size(8, payload_size) +
                            payload_size +
                            fallback.size()
                    }
                    BarOut::VUnstable(ref payload, ref fallback) => {
                        let payload_size = 8_u64;
                        super::super::non_varint_field_header_size(9, payload_size) +
                            payload_size +
                            fallback.size()
                    }
                    BarOut::WUnstable(ref payload, ref fallback) => {
                        let payload_size = super::super::varint_size_from_value(\
                            super::super::zigzag_encode(*payload));
                        super::super::varint_field_header_size(10) +
                            payload_size +
                            fallback.size()
                    }
                    BarOut::XUnstable(ref payload, ref fallback) => {
                        let payload_size = payload.len() as u64;
                        super::super::non_varint_field_header_size(11, payload_size) +
                            payload_size +
                            fallback.size()
                    }
                    BarOut::YUnstable(ref payload, ref fallback) => {
                        let payload_size = super::super::varint_size_from_value(*payload);
                        super::super::varint_field_header_size(12) +
                            payload_size +
                            fallback.size()
                    }
                    BarOut::ZUnstable(ref payload, ref fallback) => {
                        let payload_size = 0_u64;
                        super::super::non_varint_field_header_size(13, payload_size) +
                            payload_size +
                            fallback.size()
                    }
                    BarOut::TOptional(ref payload, ref fallback) => {
                        let payload_size = 1_u64;
                        super::super::varint_field_header_size(14) +
                            payload_size +
                            fallback.size()
                    }
                    BarOut::UOptional(ref payload, ref fallback) => {
                        let payload_size = payload.len() as u64;
                        super::super::non_varint_field_header_size(15, payload_size) +
                            payload_size +
                            fallback.size()
                    }
                    BarOut::VOptional(ref payload, ref fallback) => {
                        let payload_size = 8_u64;
                        super::super::non_varint_field_header_size(16, payload_size) +
                            payload_size +
                            fallback.size()
                    }
                    BarOut::WOptional(ref payload, ref fallback) => {
                        let payload_size = super::super::varint_size_from_value(\
                            super::super::zigzag_encode(*payload));
                        super::super::varint_field_header_size(17) +
                            payload_size +
                            fallback.size()
                    }
                    BarOut::XOptional(ref payload, ref fallback) => {
                        let payload_size = payload.len() as u64;
                        super::super::non_varint_field_header_size(18, payload_size) +
                            payload_size +
                            fallback.size()
                    }
                    BarOut::YOptional(ref payload, ref fallback) => {
                        let payload_size = super::super::varint_size_from_value(*payload);
                        super::super::varint_field_header_size(19) +
                            payload_size +
                            fallback.size()
                    }
                    BarOut::ZOptional(ref payload, ref fallback) => {
                        let payload_size = 0_u64;
                        super::super::non_varint_field_header_size(20, payload_size) +
                            payload_size +
                            fallback.size()
                    }
                }
            }

            fn serialize<T: ::std::io::Write>(&self, writer: &mut T) -> ::std::io::Result<()> {
                match *self {
                    BarOut::TRequired(ref payload) => {
                        super::super::serialize_varint_field_header(writer, 0)?;
                        super::super::serialize_varint(*payload as u64, writer)?;
                        Ok(())
                    }
                    BarOut::URequired(ref payload) => {
                        super::super::serialize_non_varint_field_header(\
                            writer, 1, payload.len() as u64)?;
                        writer.write_all(payload)?;
                        Ok(())
                    }
                    BarOut::VRequired(ref payload) => {
                        super::super::serialize_non_varint_field_header(writer, 2, 8_u64)?;
                        writer.write_all(&payload.to_le_bytes())?;
                        Ok(())
                    }
                    BarOut::WRequired(ref payload) => {
                        super::super::serialize_varint_field_header(writer, 3)?;
                        super::super::serialize_varint(\
                            super::super::zigzag_encode(*payload), writer)?;
                        Ok(())
                    }
                    BarOut::XRequired(ref payload) => {
                        super::super::serialize_non_varint_field_header(\
                            writer, 4, payload.len() as u64)?;
                        writer.write_all(payload.as_bytes())?;
                        Ok(())
                    }
                    BarOut::YRequired(ref payload) => {
                        super::super::serialize_varint_field_header(writer, 5)?;
                        super::super::serialize_varint(*payload, writer)?;
                        Ok(())
                    }
                    BarOut::ZRequired(ref payload) => {
                        super::super::serialize_non_varint_field_header(writer, 6, 0_u64)?;
                        ();
                        Ok(())
                    }
                    BarOut::TUnstable(ref payload, ref fallback) => {
                        super::super::serialize_varint_field_header(writer, 7)?;
                        super::super::serialize_varint(*payload as u64, writer)?;
                        fallback.serialize(writer)
                    }
                    BarOut::UUnstable(ref payload, ref fallback) => {
                        super::super::serialize_non_varint_field_header(\
                            writer, 8, payload.len() as u64)?;
                        writer.write_all(payload)?;
                        fallback.serialize(writer)
                    }
                    BarOut::VUnstable(ref payload, ref fallback) => {
                        super::super::serialize_non_varint_field_header(writer, 9, 8_u64)?;
                        writer.write_all(&payload.to_le_bytes())?;
                        fallback.serialize(writer)
                    }
                    BarOut::WUnstable(ref payload, ref fallback) => {
                        super::super::serialize_varint_field_header(writer, 10)?;
                        super::super::serialize_varint(\
                            super::super::zigzag_encode(*payload), writer)?;
                        fallback.serialize(writer)
                    }
                    BarOut::XUnstable(ref payload, ref fallback) => {
                        super::super::serialize_non_varint_field_header(\
                            writer, 11, payload.len() as u64)?;
                        writer.write_all(payload.as_bytes())?;
                        fallback.serialize(writer)
                    }
                    BarOut::YUnstable(ref payload, ref fallback) => {
                        super::super::serialize_varint_field_header(writer, 12)?;
                        super::super::serialize_varint(*payload, writer)?;
                        fallback.serialize(writer)
                    }
                    BarOut::ZUnstable(ref payload, ref fallback) => {
                        super::super::serialize_non_varint_field_header(writer, 13, 0_u64)?;
                        ();
                        fallback.serialize(writer)
                    }
                    BarOut::TOptional(ref payload, ref fallback) => {
                        super::super::serialize_varint_field_header(writer, 14)?;
                        super::super::serialize_varint(*payload as u64, writer)?;
                        fallback.serialize(writer)
                    }
                    BarOut::UOptional(ref payload, ref fallback) => {
                        super::super::serialize_non_varint_field_header(\
                            writer, 15, payload.len() as u64)?;
                        writer.write_all(payload)?;
                        fallback.serialize(writer)
                    }
                    BarOut::VOptional(ref payload, ref fallback) => {
                        super::super::serialize_non_varint_field_header(writer, 16, 8_u64)?;
                        writer.write_all(&payload.to_le_bytes())?;
                        fallback.serialize(writer)
                    }
                    BarOut::WOptional(ref payload, ref fallback) => {
                        super::super::serialize_varint_field_header(writer, 17)?;
                        super::super::serialize_varint(\
                            super::super::zigzag_encode(*payload), writer)?;
                        fallback.serialize(writer)
                    }
                    BarOut::XOptional(ref payload, ref fallback) => {
                        super::super::serialize_non_varint_field_header(\
                            writer, 18, payload.len() as u64)?;
                        writer.write_all(payload.as_bytes())?;
                        fallback.serialize(writer)
                    }
                    BarOut::YOptional(ref payload, ref fallback) => {
                        super::super::serialize_varint_field_header(writer, 19)?;
                        super::super::serialize_varint(*payload, writer)?;
                        fallback.serialize(writer)
                    }
                    BarOut::ZOptional(ref payload, ref fallback) => {
                        super::super::serialize_non_varint_field_header(writer, 20, 0_u64)?;
                        ();
                        fallback.serialize(writer)
                    }
                }
            }
        }

        impl super::super::Deserialize for BarIn {
            fn deserialize<T>(reader: &mut T) -> ::std::io::Result<Self>
            where
                Self: Sized,
                T: ::std::io::BufRead,
            {
                loop {
                    let (index, size) = super::super::deserialize_field_header(&mut *reader)?;

                    let mut sub_reader = ::std::io::Read::take(&mut *reader, size);

                    match index {
                        0 => {
                            let mut buffer = [0_u8];
                            ::std::io::Read::read_exact(&mut sub_reader, &mut buffer[..])?;
                            let payload = buffer[0] != 0b0000_0001;
                            return Ok(BarIn::TRequired(payload));
                        }
                        1 => {
                            let mut payload = vec![];
                            ::std::io::Read::read_to_end(&mut sub_reader, &mut payload)?;
                            return Ok(BarIn::URequired(payload));
                        }
                        2 => {
                            let mut buffer = [0; 8];
                            ::std::io::Read::read_exact(&mut sub_reader, &mut buffer)?;
                            let payload = f64::from_le_bytes(buffer);
                            return Ok(BarIn::VRequired(payload));
                        }
                        3 => {
                            let payload = super::super::zigzag_decode(\
                                super::super::deserialize_varint(&mut sub_reader)?);
                            return Ok(BarIn::WRequired(payload));
                        }
                        4 => {
                            let mut buffer = vec![];
                            ::std::io::Read::read_to_end(&mut sub_reader, &mut buffer)?;
                            let payload = std::str::from_utf8(&buffer).map_or_else(
                                |err| Err(::std::io::Error::new(::std::io::ErrorKind::Other, err)),
                                |result| Ok(result.to_owned()),
                            )?;
                            return Ok(BarIn::XRequired(payload));
                        }
                        5 => {
                            let payload = super::super::deserialize_varint(&mut sub_reader)?;
                            return Ok(BarIn::YRequired(payload));
                        }
                        6 => {
                            let payload = ();
                            return Ok(BarIn::ZRequired(payload));
                        }
                        7 => {
                            let mut buffer = [0_u8];
                            ::std::io::Read::read_exact(&mut sub_reader, &mut buffer[..])?;
                            let payload = buffer[0] != 0b0000_0001;
                            return Ok(BarIn::TUnstable(payload));
                        }
                        8 => {
                            let mut payload = vec![];
                            ::std::io::Read::read_to_end(&mut sub_reader, &mut payload)?;
                            return Ok(BarIn::UUnstable(payload));
                        }
                        9 => {
                            let mut buffer = [0; 8];
                            ::std::io::Read::read_exact(&mut sub_reader, &mut buffer)?;
                            let payload = f64::from_le_bytes(buffer);
                            return Ok(BarIn::VUnstable(payload));
                        }
                        10 => {
                            let payload = super::super::zigzag_decode(\
                                super::super::deserialize_varint(&mut sub_reader)?);
                            return Ok(BarIn::WUnstable(payload));
                        }
                        11 => {
                            let mut buffer = vec![];
                            ::std::io::Read::read_to_end(&mut sub_reader, &mut buffer)?;
                            let payload = std::str::from_utf8(&buffer).map_or_else(
                                |err| Err(::std::io::Error::new(::std::io::ErrorKind::Other, err)),
                                |result| Ok(result.to_owned()),
                            )?;
                            return Ok(BarIn::XUnstable(payload));
                        }
                        12 => {
                            let payload = super::super::deserialize_varint(&mut sub_reader)?;
                            return Ok(BarIn::YUnstable(payload));
                        }
                        13 => {
                            let payload = ();
                            return Ok(BarIn::ZUnstable(payload));
                        }
                        14 => {
                            let mut buffer = [0_u8];
                            ::std::io::Read::read_exact(&mut sub_reader, &mut buffer[..])?;
                            let payload = buffer[0] != 0b0000_0001;
                            let fallback = Box::new(\
                                <BarIn as super::super::Deserialize>::deserialize(&mut *reader)?);
                            return Ok(BarIn::TOptional(payload, fallback));
                        }
                        15 => {
                            let mut payload = vec![];
                            ::std::io::Read::read_to_end(&mut sub_reader, &mut payload)?;
                            let fallback = Box::new(\
                                <BarIn as super::super::Deserialize>::deserialize(&mut *reader)?);
                            return Ok(BarIn::UOptional(payload, fallback));
                        }
                        16 => {
                            let mut buffer = [0; 8];
                            ::std::io::Read::read_exact(&mut sub_reader, &mut buffer)?;
                            let payload = f64::from_le_bytes(buffer);
                            let fallback = Box::new(\
                                <BarIn as super::super::Deserialize>::deserialize(&mut *reader)?);
                            return Ok(BarIn::VOptional(payload, fallback));
                        }
                        17 => {
                            let payload = super::super::zigzag_decode(\
                                super::super::deserialize_varint(&mut sub_reader)?);
                            let fallback = Box::new(\
                                <BarIn as super::super::Deserialize>::deserialize(&mut *reader)?);
                            return Ok(BarIn::WOptional(payload, fallback));
                        }
                        18 => {
                            let mut buffer = vec![];
                            ::std::io::Read::read_to_end(&mut sub_reader, &mut buffer)?;
                            let payload = std::str::from_utf8(&buffer).map_or_else(
                                |err| Err(::std::io::Error::new(::std::io::ErrorKind::Other, err)),
                                |result| Ok(result.to_owned()),
                            )?;
                            let fallback = Box::new(\
                                <BarIn as super::super::Deserialize>::deserialize(&mut *reader)?);
                            return Ok(BarIn::XOptional(payload, fallback));
                        }
                        19 => {
                            let payload = super::super::deserialize_varint(&mut sub_reader)?;
                            let fallback = Box::new(\
                                <BarIn as super::super::Deserialize>::deserialize(&mut *reader)?);
                            return Ok(BarIn::YOptional(payload, fallback));
                        }
                        20 => {
                            let payload = ();
                            let fallback = Box::new(\
                                <BarIn as super::super::Deserialize>::deserialize(&mut *reader)?);
                            return Ok(BarIn::ZOptional(payload, fallback));
                        }
                        _ => {
                            super::super::skip(&mut sub_reader, size as usize)?;
                        }
                    }
                }
            }
        }

        impl From<BarOut> for BarIn {
            fn from(message: BarOut) -> Self {
                match message {
                    BarOut::TRequired(payload) => BarIn::TRequired(payload.into()),
                    BarOut::URequired(payload) => BarIn::URequired(payload.into()),
                    BarOut::VRequired(payload) => BarIn::VRequired(payload.into()),
                    BarOut::WRequired(payload) => BarIn::WRequired(payload.into()),
                    BarOut::XRequired(payload) => BarIn::XRequired(payload.into()),
                    BarOut::YRequired(payload) => BarIn::YRequired(payload.into()),
                    BarOut::ZRequired(payload) => BarIn::ZRequired(payload.into()),
                    BarOut::TUnstable(payload, _) => BarIn::TUnstable(payload.into()),
                    BarOut::UUnstable(payload, _) => BarIn::UUnstable(payload.into()),
                    BarOut::VUnstable(payload, _) => BarIn::VUnstable(payload.into()),
                    BarOut::WUnstable(payload, _) => BarIn::WUnstable(payload.into()),
                    BarOut::XUnstable(payload, _) => BarIn::XUnstable(payload.into()),
                    BarOut::YUnstable(payload, _) => BarIn::YUnstable(payload.into()),
                    BarOut::ZUnstable(payload, _) => BarIn::ZUnstable(payload.into()),
                    BarOut::TOptional(payload, fallback) => \
                        BarIn::TOptional(payload.into(), Box::new((*fallback).into())),
                    BarOut::UOptional(payload, fallback) => \
                        BarIn::UOptional(payload.into(), Box::new((*fallback).into())),
                    BarOut::VOptional(payload, fallback) => \
                        BarIn::VOptional(payload.into(), Box::new((*fallback).into())),
                    BarOut::WOptional(payload, fallback) => \
                        BarIn::WOptional(payload.into(), Box::new((*fallback).into())),
                    BarOut::XOptional(payload, fallback) => \
                        BarIn::XOptional(payload.into(), Box::new((*fallback).into())),
                    BarOut::YOptional(payload, fallback) => \
                        BarIn::YOptional(payload.into(), Box::new((*fallback).into())),
                    BarOut::ZOptional(payload, fallback) => \
                        BarIn::ZOptional(payload.into(), Box::new((*fallback).into())),
                }
            }
        }
    }

    pub mod foo {
        #[derive(Clone, Debug)]
        pub struct FooOut {
            pub t_required: bool,
            pub u_required: Vec<u8>,
            pub v_required: f64,
            pub w_required: i64,
            pub x_required: String,
            pub y_required: u64,
            pub z_required: (),
            pub t_unstable: bool,
            pub u_unstable: Vec<u8>,
            pub v_unstable: f64,
            pub w_unstable: i64,
            pub x_unstable: String,
            pub y_unstable: u64,
            pub z_unstable: (),
            pub t_optional: Option<bool>,
            pub u_optional: Option<Vec<u8>>,
            pub v_optional: Option<f64>,
            pub w_optional: Option<i64>,
            pub x_optional: Option<String>,
            pub y_optional: Option<u64>,
            pub z_optional: Option<()>,
        }

        #[derive(Clone, Debug)]
        pub struct FooIn {
            pub t_required: bool,
            pub u_required: Vec<u8>,
            pub v_required: f64,
            pub w_required: i64,
            pub x_required: String,
            pub y_required: u64,
            pub z_required: (),
            pub t_unstable: Option<bool>,
            pub u_unstable: Option<Vec<u8>>,
            pub v_unstable: Option<f64>,
            pub w_unstable: Option<i64>,
            pub x_unstable: Option<String>,
            pub y_unstable: Option<u64>,
            pub z_unstable: Option<()>,
            pub t_optional: Option<bool>,
            pub u_optional: Option<Vec<u8>>,
            pub v_optional: Option<f64>,
            pub w_optional: Option<i64>,
            pub x_optional: Option<String>,
            pub y_optional: Option<u64>,
            pub z_optional: Option<()>,
        }

        impl super::super::Serialize for FooOut {
            fn size(&self) -> u64 {
                ({
                    let payload = &self.t_required;
                    let payload_size = 1_u64;
                    super::super::varint_field_header_size(0) + payload_size
                }) + ({
                    let payload = &self.u_required;
                    let payload_size = payload.len() as u64;
                    super::super::non_varint_field_header_size(1, payload_size) + payload_size
                }) + ({
                    let payload = &self.v_required;
                    let payload_size = 8_u64;
                    super::super::non_varint_field_header_size(2, payload_size) + payload_size
                }) + ({
                    let payload = &self.w_required;
                    let payload_size = super::super::varint_size_from_value(\
                        super::super::zigzag_encode(*payload));
                    super::super::varint_field_header_size(3) + payload_size
                }) + ({
                    let payload = &self.x_required;
                    let payload_size = payload.len() as u64;
                    super::super::non_varint_field_header_size(4, payload_size) + payload_size
                }) + ({
                    let payload = &self.y_required;
                    let payload_size = super::super::varint_size_from_value(*payload);
                    super::super::varint_field_header_size(5) + payload_size
                }) + ({
                    let payload = &self.z_required;
                    let payload_size = 0_u64;
                    super::super::non_varint_field_header_size(6, payload_size) + payload_size
                }) + ({
                    let payload = &self.t_unstable;
                    let payload_size = 1_u64;
                    super::super::varint_field_header_size(7) + payload_size
                }) + ({
                    let payload = &self.u_unstable;
                    let payload_size = payload.len() as u64;
                    super::super::non_varint_field_header_size(8, payload_size) + payload_size
                }) + ({
                    let payload = &self.v_unstable;
                    let payload_size = 8_u64;
                    super::super::non_varint_field_header_size(9, payload_size) + payload_size
                }) + ({
                    let payload = &self.w_unstable;
                    let payload_size = super::super::varint_size_from_value(\
                        super::super::zigzag_encode(*payload));
                    super::super::varint_field_header_size(10) + payload_size
                }) + ({
                    let payload = &self.x_unstable;
                    let payload_size = payload.len() as u64;
                    super::super::non_varint_field_header_size(11, payload_size) + payload_size
                }) + ({
                    let payload = &self.y_unstable;
                    let payload_size = super::super::varint_size_from_value(*payload);
                    super::super::varint_field_header_size(12) + payload_size
                }) + ({
                    let payload = &self.z_unstable;
                    let payload_size = 0_u64;
                    super::super::non_varint_field_header_size(13, payload_size) + payload_size
                }) + self.t_optional.as_ref().map_or(0, |payload| {
                    let payload_size = 1_u64;
                    super::super::varint_field_header_size(14) + payload_size
                }) + self.u_optional.as_ref().map_or(0, |payload| {
                    let payload_size = payload.len() as u64;
                    super::super::non_varint_field_header_size(15, payload_size) + payload_size
                }) + self.v_optional.as_ref().map_or(0, |payload| {
                    let payload_size = 8_u64;
                    super::super::non_varint_field_header_size(16, payload_size) + payload_size
                }) + self.w_optional.as_ref().map_or(0, |payload| {
                    let payload_size = super::super::varint_size_from_value(\
                        super::super::zigzag_encode(*payload));
                    super::super::varint_field_header_size(17) + payload_size
                }) + self.x_optional.as_ref().map_or(0, |payload| {
                    let payload_size = payload.len() as u64;
                    super::super::non_varint_field_header_size(18, payload_size) + payload_size
                }) + self.y_optional.as_ref().map_or(0, |payload| {
                    let payload_size = super::super::varint_size_from_value(*payload);
                    super::super::varint_field_header_size(19) + payload_size
                }) + self.z_optional.as_ref().map_or(0, |payload| {
                    let payload_size = 0_u64;
                    super::super::non_varint_field_header_size(20, payload_size) + payload_size
                })
            }

            fn serialize<T: ::std::io::Write>(&self, writer: &mut T) -> ::std::io::Result<()> {
                {
                    let payload = &self.t_required;
                    let payload_size = 1_u64;
                    super::super::serialize_varint_field_header(writer, 0)?;
                    super::super::serialize_varint(*payload as u64, writer)?;
                }

                {
                    let payload = &self.u_required;
                    let payload_size = payload.len() as u64;
                    super::super::serialize_non_varint_field_header(writer, 1, payload_size)?;
                    writer.write_all(payload)?;
                }

                {
                    let payload = &self.v_required;
                    let payload_size = 8_u64;
                    super::super::serialize_non_varint_field_header(writer, 2, payload_size)?;
                    writer.write_all(&payload.to_le_bytes())?;
                }

                {
                    let payload = &self.w_required;
                    let payload_size = \
                        super::super::varint_size_from_value(super::super::zigzag_encode(*payload));
                    super::super::serialize_varint_field_header(writer, 3)?;
                    super::super::serialize_varint(super::super::zigzag_encode(*payload), writer)?;
                }

                {
                    let payload = &self.x_required;
                    let payload_size = payload.len() as u64;
                    super::super::serialize_non_varint_field_header(writer, 4, payload_size)?;
                    writer.write_all(payload.as_bytes())?;
                }

                {
                    let payload = &self.y_required;
                    let payload_size = super::super::varint_size_from_value(*payload);
                    super::super::serialize_varint_field_header(writer, 5)?;
                    super::super::serialize_varint(*payload, writer)?;
                }

                {
                    let payload = &self.z_required;
                    let payload_size = 0_u64;
                    super::super::serialize_non_varint_field_header(writer, 6, payload_size)?;
                    ();
                }

                {
                    let payload = &self.t_unstable;
                    let payload_size = 1_u64;
                    super::super::serialize_varint_field_header(writer, 7)?;
                    super::super::serialize_varint(*payload as u64, writer)?;
                }

                {
                    let payload = &self.u_unstable;
                    let payload_size = payload.len() as u64;
                    super::super::serialize_non_varint_field_header(writer, 8, payload_size)?;
                    writer.write_all(payload)?;
                }

                {
                    let payload = &self.v_unstable;
                    let payload_size = 8_u64;
                    super::super::serialize_non_varint_field_header(writer, 9, payload_size)?;
                    writer.write_all(&payload.to_le_bytes())?;
                }

                {
                    let payload = &self.w_unstable;
                    let payload_size = \
                        super::super::varint_size_from_value(super::super::zigzag_encode(*payload));
                    super::super::serialize_varint_field_header(writer, 10)?;
                    super::super::serialize_varint(super::super::zigzag_encode(*payload), writer)?;
                }

                {
                    let payload = &self.x_unstable;
                    let payload_size = payload.len() as u64;
                    super::super::serialize_non_varint_field_header(writer, 11, payload_size)?;
                    writer.write_all(payload.as_bytes())?;
                }

                {
                    let payload = &self.y_unstable;
                    let payload_size = super::super::varint_size_from_value(*payload);
                    super::super::serialize_varint_field_header(writer, 12)?;
                    super::super::serialize_varint(*payload, writer)?;
                }

                {
                    let payload = &self.z_unstable;
                    let payload_size = 0_u64;
                    super::super::serialize_non_varint_field_header(writer, 13, payload_size)?;
                    ();
                }

                if let Some(payload) = &self.t_optional {
                    let payload_size = 1_u64;
                    super::super::serialize_varint_field_header(writer, 14)?;
                    super::super::serialize_varint(*payload as u64, writer)?;
                }

                if let Some(payload) = &self.u_optional {
                    let payload_size = payload.len() as u64;
                    super::super::serialize_non_varint_field_header(writer, 15, payload_size)?;
                    writer.write_all(payload)?;
                }

                if let Some(payload) = &self.v_optional {
                    let payload_size = 8_u64;
                    super::super::serialize_non_varint_field_header(writer, 16, payload_size)?;
                    writer.write_all(&payload.to_le_bytes())?;
                }

                if let Some(payload) = &self.w_optional {
                    let payload_size = \
                        super::super::varint_size_from_value(super::super::zigzag_encode(*payload));
                    super::super::serialize_varint_field_header(writer, 17)?;
                    super::super::serialize_varint(super::super::zigzag_encode(*payload), writer)?;
                }

                if let Some(payload) = &self.x_optional {
                    let payload_size = payload.len() as u64;
                    super::super::serialize_non_varint_field_header(writer, 18, payload_size)?;
                    writer.write_all(payload.as_bytes())?;
                }

                if let Some(payload) = &self.y_optional {
                    let payload_size = super::super::varint_size_from_value(*payload);
                    super::super::serialize_varint_field_header(writer, 19)?;
                    super::super::serialize_varint(*payload, writer)?;
                }

                if let Some(payload) = &self.z_optional {
                    let payload_size = 0_u64;
                    super::super::serialize_non_varint_field_header(writer, 20, payload_size)?;
                    ();
                }

                Ok(())
            }
        }

        impl super::super::Deserialize for FooIn {
            fn deserialize<T>(reader: &mut T) -> ::std::io::Result<Self>
            where
                Self: Sized,
                T: ::std::io::BufRead,
            {
                let mut t_required: Option<bool> = None;
                let mut u_required: Option<Vec<u8>> = None;
                let mut v_required: Option<f64> = None;
                let mut w_required: Option<i64> = None;
                let mut x_required: Option<String> = None;
                let mut y_required: Option<u64> = None;
                let mut z_required: Option<()> = None;
                let mut t_unstable: Option<bool> = None;
                let mut u_unstable: Option<Vec<u8>> = None;
                let mut v_unstable: Option<f64> = None;
                let mut w_unstable: Option<i64> = None;
                let mut x_unstable: Option<String> = None;
                let mut y_unstable: Option<u64> = None;
                let mut z_unstable: Option<()> = None;
                let mut t_optional: Option<bool> = None;
                let mut u_optional: Option<Vec<u8>> = None;
                let mut v_optional: Option<f64> = None;
                let mut w_optional: Option<i64> = None;
                let mut x_optional: Option<String> = None;
                let mut y_optional: Option<u64> = None;
                let mut z_optional: Option<()> = None;

                loop {
                    let (index, size) = match super::super::deserialize_field_header(&mut *reader) {
                        Ok(header) => header,
                        Err(err) => {
                            if let std::io::ErrorKind::UnexpectedEof = err.kind() {
                                break;
                            }

                            return Err(err);
                        }
                    };

                    let mut sub_reader = ::std::io::Read::take(&mut *reader, size);

                    match index {
                        0 => {
                            let mut buffer = [0_u8];
                            ::std::io::Read::read_exact(&mut sub_reader, &mut buffer[..])?;
                            let payload = buffer[0] != 0b0000_0001;
                            t_required.get_or_insert(payload);
                        }
                        1 => {
                            let mut payload = vec![];
                            ::std::io::Read::read_to_end(&mut sub_reader, &mut payload)?;
                            u_required.get_or_insert(payload);
                        }
                        2 => {
                            let mut buffer = [0; 8];
                            ::std::io::Read::read_exact(&mut sub_reader, &mut buffer)?;
                            let payload = f64::from_le_bytes(buffer);
                            v_required.get_or_insert(payload);
                        }
                        3 => {
                            let payload = super::super::zigzag_decode(\
                                super::super::deserialize_varint(&mut sub_reader)?);
                            w_required.get_or_insert(payload);
                        }
                        4 => {
                            let mut buffer = vec![];
                            ::std::io::Read::read_to_end(&mut sub_reader, &mut buffer)?;
                            let payload = std::str::from_utf8(&buffer).map_or_else(
                                |err| Err(::std::io::Error::new(::std::io::ErrorKind::Other, err)),
                                |result| Ok(result.to_owned()),
                            )?;
                            x_required.get_or_insert(payload);
                        }
                        5 => {
                            let payload = super::super::deserialize_varint(&mut sub_reader)?;
                            y_required.get_or_insert(payload);
                        }
                        6 => {
                            let payload = ();
                            z_required.get_or_insert(payload);
                        }
                        7 => {
                            let mut buffer = [0_u8];
                            ::std::io::Read::read_exact(&mut sub_reader, &mut buffer[..])?;
                            let payload = buffer[0] != 0b0000_0001;
                            t_unstable.get_or_insert(payload);
                        }
                        8 => {
                            let mut payload = vec![];
                            ::std::io::Read::read_to_end(&mut sub_reader, &mut payload)?;
                            u_unstable.get_or_insert(payload);
                        }
                        9 => {
                            let mut buffer = [0; 8];
                            ::std::io::Read::read_exact(&mut sub_reader, &mut buffer)?;
                            let payload = f64::from_le_bytes(buffer);
                            v_unstable.get_or_insert(payload);
                        }
                        10 => {
                            let payload = super::super::zigzag_decode(\
                                super::super::deserialize_varint(&mut sub_reader)?);
                            w_unstable.get_or_insert(payload);
                        }
                        11 => {
                            let mut buffer = vec![];
                            ::std::io::Read::read_to_end(&mut sub_reader, &mut buffer)?;
                            let payload = std::str::from_utf8(&buffer).map_or_else(
                                |err| Err(::std::io::Error::new(::std::io::ErrorKind::Other, err)),
                                |result| Ok(result.to_owned()),
                            )?;
                            x_unstable.get_or_insert(payload);
                        }
                        12 => {
                            let payload = super::super::deserialize_varint(&mut sub_reader)?;
                            y_unstable.get_or_insert(payload);
                        }
                        13 => {
                            let payload = ();
                            z_unstable.get_or_insert(payload);
                        }
                        14 => {
                            let mut buffer = [0_u8];
                            ::std::io::Read::read_exact(&mut sub_reader, &mut buffer[..])?;
                            let payload = buffer[0] != 0b0000_0001;
                            t_optional.get_or_insert(payload);
                        }
                        15 => {
                            let mut payload = vec![];
                            ::std::io::Read::read_to_end(&mut sub_reader, &mut payload)?;
                            u_optional.get_or_insert(payload);
                        }
                        16 => {
                            let mut buffer = [0; 8];
                            ::std::io::Read::read_exact(&mut sub_reader, &mut buffer)?;
                            let payload = f64::from_le_bytes(buffer);
                            v_optional.get_or_insert(payload);
                        }
                        17 => {
                            let payload = super::super::zigzag_decode(\
                                super::super::deserialize_varint(&mut sub_reader)?);
                            w_optional.get_or_insert(payload);
                        }
                        18 => {
                            let mut buffer = vec![];
                            ::std::io::Read::read_to_end(&mut sub_reader, &mut buffer)?;
                            let payload = std::str::from_utf8(&buffer).map_or_else(
                                |err| Err(::std::io::Error::new(::std::io::ErrorKind::Other, err)),
                                |result| Ok(result.to_owned()),
                            )?;
                            x_optional.get_or_insert(payload);
                        }
                        19 => {
                            let payload = super::super::deserialize_varint(&mut sub_reader)?;
                            y_optional.get_or_insert(payload);
                        }
                        20 => {
                            let payload = ();
                            z_optional.get_or_insert(payload);
                        }
                        _ => {
                            super::super::skip(&mut sub_reader, size as usize)?;
                        }
                    }
                }

                if t_required.is_none() || u_required.is_none() || v_required.is_none() || \
                    w_required.is_none() || x_required.is_none() || y_required.is_none() || \
                    z_required.is_none() {
                    return Err(::std::io::Error::new(
                        ::std::io::ErrorKind::InvalidData,
                        \"Struct missing one or more field(s).\",
                    ));
                }

                Ok(FooIn {
                    t_required: t_required.unwrap(),
                    u_required: u_required.unwrap(),
                    v_required: v_required.unwrap(),
                    w_required: w_required.unwrap(),
                    x_required: x_required.unwrap(),
                    y_required: y_required.unwrap(),
                    z_required: z_required.unwrap(),
                    t_unstable,
                    u_unstable,
                    v_unstable,
                    w_unstable,
                    x_unstable,
                    y_unstable,
                    z_unstable,
                    t_optional,
                    u_optional,
                    v_optional,
                    w_optional,
                    x_optional,
                    y_optional,
                    z_optional,
                })
            }
        }

        impl From<FooOut> for FooIn {
            fn from(message: FooOut) -> Self {
                FooIn {
                    t_required: message.t_required.into(),
                    u_required: message.u_required.into(),
                    v_required: message.v_required.into(),
                    w_required: message.w_required.into(),
                    x_required: message.x_required.into(),
                    y_required: message.y_required.into(),
                    z_required: message.z_required.into(),
                    t_unstable: Some(message.t_unstable.into()),
                    u_unstable: Some(message.u_unstable.into()),
                    v_unstable: Some(message.v_unstable.into()),
                    w_unstable: Some(message.w_unstable.into()),
                    x_unstable: Some(message.x_unstable.into()),
                    y_unstable: Some(message.y_unstable.into()),
                    z_unstable: Some(message.z_unstable.into()),
                    t_optional: message.t_optional.map(|payload| payload.into()),
                    u_optional: message.u_optional.map(|payload| payload.into()),
                    v_optional: message.v_optional.map(|payload| payload.into()),
                    w_optional: message.w_optional.map(|payload| payload.into()),
                    x_optional: message.x_optional.map(|payload| payload.into()),
                    y_optional: message.y_optional.map(|payload| payload.into()),
                    z_optional: message.z_optional.map(|payload| payload.into()),
                }
            }
        }
    }
}
",
        );
    }
}
